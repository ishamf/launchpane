/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getCommands() {
    return invoke()<Command[]>("get_commands")
}

export function createCommand() {
    return invoke()<Command>("create_command")
}

export function getCommand(commandId: number) {
    return invoke()<Command | null>("get_command", { commandId })
}

export function setWindowSize(width: number, height: number) {
    return invoke()<null>("set_window_size", { width,height })
}

export function updateCommand(commandId: number, data: CommandUpdateData) {
    return invoke()<Command>("update_command", { commandId,data })
}

export function deleteCommand(commandId: number) {
    return invoke()<Command>("delete_command", { commandId })
}

export function getPlatformDetails() {
    return invoke()<PlatformDetails>("get_platform_details")
}

export function getCommandLogLines(commandId: number) {
    return invoke()<CommandLogLine[]>("get_command_log_lines", { commandId })
}

export function getNewerCommandLogLines(commandId: number, lastId: number) {
    return invoke()<CommandLogLine[]>("get_newer_command_log_lines", { commandId,lastId })
}

export type PlatformDetails = { path_separator: string }
export type Command = { id: number; name: string; cwd: string; command: string; lastRunResultType: string | null; lastRunCode: string | null }
export type CommandUpdateData = { name?: string | null; cwd?: string | null; command?: string | null }
export type CommandLogLine = { id: number; commandId: number; source: number; line: string; timestamp: number }
